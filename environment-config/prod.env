source base.env

APP_NAME=vb-api

JVM_GC_OPTIONS=" -XX:+UseG1GC"

# Print all jvm flags for diagnostics purposes.
JVM_GC_OPTIONS="$JVM_GC_OPTIONS -XX:+PrintFlagsFinal"

# **Warning**: This leads to increased startup times. Uncomment this if you've benchmarked your startup time with this option and it is acceptable.
# OS doesn't always preserve the actual memory space.
# This leads a memory fragmentation inside OS and has a negative impact to GC performance.
# This option is to touch all memory space at start-up time to make sure OS preserve all memory space for this JVM process.
# JVM_GC_OPTIONS="$JVM_GC_OPTIONS -XX:+AlwaysPreTouch"

JVM_GC_OPTIONS="$JVM_GC_OPTIONS  -XX:ErrorFile=/logs/$APP_NAME/HS_ERR_PID%p.log"

# The following section of GC options are only applicable to JAVA 8.
# JAVA 9+ uses unified logging for JVM messages using XLog. Following would cause failures at application launch.
# You can either comment them out if not needed or convert them to Xlog configuration as described on: https://docs.oracle.com/javase/9/tools/java.htm#JSWOR624
# Also in JAVA 9+, log rotation will automatically be handled by the framework for you.
JVM_GC_OPTIONS="$JVM_GC_OPTIONS -XX:+PrintGCApplicationStoppedTime\
 -XX:+PrintGCDetails\
 -XX:+PrintGCTimeStamps\
 -XX:+PrintGCDateStamps\
 -Xloggc:/logs/$APP_NAME/gc.log\
 -XX:+UseGCLogFileRotation\
 -XX:NumberOfGCLogFiles=10\
 -XX:GCLogFileSize=10M\
 "


# Throwing an exception is a costly operation for JVM, especially the part of gathering stacktraces is a very expensive thing to do.
# As a part of optimization, when JVM sees an exception thrown from the same code point repetitively, it stops filling stacktraces.
# This is probably good for third party applications or library, however this is very bad for service owners.
# Having NullPoinerException repetitively in the application log without stacktraces won't help. It is recommended to disable to this behavior for services.
JVM_GC_OPTIONS="$JVM_GC_OPTIONS -XX:-OmitStackTraceInFastThrow"

# During GC, all object references need to be processed, by default, it's done by a single thread.
# This option is to do the work in parallel. The number of threads are determined by available processor count.
# It is recommended to turn this one if you have more than 4 vCPUs with larger heap size (4G ~).
JVM_GC_OPTIONS="$JVM_GC_OPTIONS -XX:+ParallelRefProcEnabled"

# Every GC cycle, JVM updates some statistics into shared memory space, which sometimes takes few milliseconds depending on the situation.
# That information is only used from external tools such as jcmd or jps. (Low impact)
JVM_GC_OPTIONS="$JVM_GC_OPTIONS -XX:+PerfDisableSharedMem"

# PLABs is a buffer memory space for each thread during GC, resizing this for each GC will need some communication between multiple threads
# and may have some impact. Disabling this resize activity gives more consistent GC pause time. (Low impact)
JVM_GC_OPTIONS="$JVM_GC_OPTIONS -XX:-ResizePLAB"

TRUST_STORE_SETTINGS="-Djavax.net.ssl.trustStore=/etc/secret/vb-api/truststore"
